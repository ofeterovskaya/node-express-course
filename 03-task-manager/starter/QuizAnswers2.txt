In this lesson, you created a middleware function called asyncWrapper. Why?

By using asyncWrapper, I can write asynchronous route handlers in a clean way without having to write a try-catch block again and again. 
So, I can handle all errors in a centralized error handling middleware.

Suppose that you want to make sure that both a status code and an error message are sent back to the user when they request the URL for a task that does not exist. Assume that youâ€™ve created a CustomAPIError class and an error handler that references that class. Complete the code:
const getTask = asyncWrapper(async (req, res, next) => {  
  const { id: taskID } = req.params;  
  const task = await Task.findOne({ _id: taskID });  
  if (!task) {  
    // your code here  
    const err = new CustomAPIError('No task found with the given id', 404);

    //note to me we can  throw this error since it's being handled within the asyncWrapper middleware function
    return next(new CustomAPIError(`Task with ID ${taskID} not found`, 404));
    return next(err);
  }  
  res.status(200).json({ task });  
});  